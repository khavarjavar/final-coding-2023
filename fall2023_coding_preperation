
#include <stdio.h>
#include <math.h>
int k, n, res;
int f(int k, int n)
{
	if (k == n) return 1;
	if (k == 0) return 1;
	return f(k - 1, n - 1) + f(k, n - 1);
}
int main(void)
{
	scanf("%d %d", &k, &n);
	res = f(k, n);
	printf("%d\n", res);
	return 0;
}

//<------------------------------------------------------------------------------------------------------------------------------------>//

/*
struct point 

 { 

  int x; // 10..99 

  int y; // 10..99 

  int z; // 10..99 

 };

Input contains data as a sequence of structures point. 

input(52).txt

Find the sum of y values for all records for which z is odd.

*/
/*
#include <stdio.h>
#include <string.h>

//#define SIZE 6

struct point

{
    int x;
    int y;
    int z;

} p;

int s = 0;
int main()

{

    FILE* fp;

    fp = fopen("C:\\Users\\ASUS\\Downloads\\input(52) (2).txt", "r");
    // fseek(fp, 0, SEEK_END);

   
    while (fscanf(fp, "%2d%2d%2d", &p.x, &p.y, &p.z) == 3)

    {

        if ((p.z % 2) != 0)

        {

            s += p.y;

        }

    }

    printf("%d\n", s); //  ... 1st line

    return 0;

}

*/

//<------------------------------------------------------------------------------------------------------------------------------------>//



	Two dimensional array of size n * n is given. Find the sum of elements in its k-th row. Row numbers start from 1.
Input
First line contains the size of array n (n ≤ 100) and number k. Each of the next n lines contains n integers.
Output
Print the sum of elements in the k-th row of array.
Sample Input
3 2
4 6 7
8 3 2
5 4 2
Sample Output
13

input.txt
 			

#include <stdio.h>
int i, j, n, k, sum = 0;

int main() {

         freopen("C:\\Users\\ASUS\\Downloads\\input (1).txt", "r",stdin);

    int n;
    scanf("%d", &n);

    int matrix[100][100];

    for (int i = 0; i < n; ++i) {
        for (int j = 0; j < n; ++j) {
            scanf("%d", &matrix[i][j]);
        }
    }

    for (int i = 0; i < n; ++i) {
        int row_sum = 0;
        for (int j = 0; j < n; ++j) {
            row_sum += matrix[i][j];
        }
        printf("%d\n", row_sum);
    }

    return 0;
}



//<------------------------------------------------------------------------------------------------------------------------------------>//


//burda sadece min salary ya max salary isteyir

#include <stdio.h>
#include <string.h>

//#define SIZE 6

struct person

{
    // char name[SIZE]; // 5 bytes + 0

    char surname[11]; // 5 bytes + 0

    int age; // 10..99

    int salary; // 1000..9999

};

struct person p, temp;
int i, n;
int main()

{

    FILE* fp;

    fp = fopen("input.txt", "r");
    // fseek(fp, 0, SEEK_END);

    int min = 1000;

    while (fscanf(fp, "%10s%2d%3d", p.surname, &p.age, &p.salary) == 3)

    {

       
if (p.salary < min)

        {

            min = p.salary;

        }

    }

    printf("%d\n", min); //  ... 1st line//bele olanda 1k verir
    // printf("%d", ftell(fp)); //bele 3238


    //int cnt = 0;


    return 0;

}



//<--------------------------------------------------------------------------------------------------------------------------->//

/*
Question 2
struct person	

{

char surname［ 11 ］; // 10 bytes surname + 0 byte

int age; // from 10 to 99

int salary; // from 100 to 999

};

Input contains data as a sequence of structures person. 

 Find the surname of a person with minimum salary. 

If there are multiple people with minimum salary, print the information from a record that is closer to the end of the file.

*/
/*

#include <stdio.h>
#include <string.h>

struct person
{
    char surname[11];
    int age;
    int salary;
    int number; // Store the position of the person in the file
};

struct person p, minPerson;
int i = 0; // Initialize the counter
int main()
{
    FILE *fp;

    fp = fopen("C:\\Users\\ASUS\\Downloads\\input (22).txt", "r");

 /*   if (fp == NULL)
    {
        perror("Error opening the file");
        return 1;
    }*/

    int min = 100000;
    int max = -5555;

    while (fscanf(fp, "%10s%2d%3d", p.surname, &p.age, &p.salary) == 3)
    {
        i++;

        if (p.salary <= min)
        {
            min = p.salary;
            max = i; // Update the position of the latest person with the minimum salary, burda end of file'a yaxin deyir deye her defe sonraki i'a update edirik
          minPerson = p; // Store the current person as the one with the minimum salary ONEMLI
        }
    }

    // Print the information of the person with the minimum salary closer to the end of the file
    printf("Surname of person with minimum salary: %s\n", minPerson.surname);
  //  printf("Age: %d\n", minPerson.age);
  //  printf("Salary: %d\n", minPerson.salary);
//    printf("Position in the file: %d\n", max);

    fclose(fp);

    return 0;
}

*/

//<------------------------------------------------------------------------------------------------------------------------------->//
/*
Question 3
struct person

{

char surname［ 11 ］; // 10 bytes surname + 0 byte

int age; // from 10 to 99

int salary; // from 100 to 999

};

Input contains data as a sequence of structures person. 

input.txt

Find the surname of a person with minimum salary. 

If there are multiple people with minimum salary, print the information from a record that is closer to the beginning of the file.

*/
/*

#include <stdio.h>
#include <string.h>

struct person
{
    char surname[11];
    int age;
    int salary;
    int number; // Store the position of the person in the file
};

struct person p, minPerson;
int i = 0; // Initialize the counter
int main()
{
    FILE *fp;

    fp = fopen("C:\\Users\\ASUS\\Downloads\\input (24).txt", "r");

    if (fp == NULL)
    {
        perror("Error opening the file");
        return 1;
    }

    int min = 100000;
    int minPosition = 0;

    while (fscanf(fp, "%10s%2d%3d", p.surname, &p.age, &p.salary) == 3)
    {
        i++;

        if (p.salary < min || (p.salary == min && i < minPosition))//ferqi butrdadir ki eger eynilik olsa deyiremki i kicik olan goturulsun EGER BEGINNING OF FILE'A CLOSER DEYIRSE
        {
            min = p.salary;
            minPosition = i; // Update the position of the latest person with the minimum salary
            minPerson = p;   // Store the current person as the one with the minimum salary
        }
    }

    // Print the information of the person with the minimum salary closer to the beginning of the file
    printf("Surname of person with minimum salary: %s\n", minPerson.surname);
   // printf("Age: %d\n", minPerson.age);
  //  printf("Salary: %d\n", minPerson.salary);
 //   printf("Position in the file (Closer to the Beginning): %d\n", minPosition);

    // OR, if you want the one closer to the end of the file:
    // printf("Position in the file (Closer to the End): %d\n", i - minPosition + 1);

    fclose(fp);

    return 0;
}


*/



